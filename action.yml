name: "New-ReleaseNotesFromChangeLog"
description: "Create ReleaseNotes.md from ChangeLog.md with version filter"
author: "Sergey.S.Betke@yandex.ru"
branding:
  icon: "package"
  color: blue
inputs:
  change-log-path:
    description: "relative path to ChangeLog.md file"
    required: false
    default: "CHANGELOG.md"
  release-notes-path:
    description: "relative path to ReleaseNotes.md file"
    required: false
    default: "RELEASENOTES.md"
  version:
    description: "project version, for which ReleaseNotes.md must be generated"
    required: false
    default: "latest"
  use-gitversion:
    description: "Install and use GitVersion for project version auto detect"
    required: false
    default: "false"
  gitversion-version:
    description: "GitVersion required version"
    required: false
    default: "5.x"
  gitversion-use-config-file:
    description: "configure GitVersion for using config file"
    required: false
    default: "true"
  use-tag-as-version:
    description: |
      Use github.ref_name (tag for current commit).
      Usable just for action, invoked by version tags.
    required: false
    default: "false"
  verbose:
    description: "verbose output"
    required: false
    default: "true"
outputs:
  release-notes-path:
    description: "full path to generated ReleaseNotes.md file"
    value: ${{ steps.main.outputs.release-notes-path }}
  actual-version:
    description: "actual project version, for which ReleaseNotes.md generated (used if version param does not specified)"
    value: ${{ steps.main.outputs.actual-version }}
runs:
  using: "composite"
  steps:
    - name: Install GitVersion
      if: ${{ ( inputs.use-gitversion == 'true' ) }}
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: ${{ inputs.gitversion-version }}

    - name: Determine Version
      id: gitversion
      if: ${{ ( inputs.use-gitversion == 'true' ) }}
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        useConfigFile: ${{ ( inputs.gitversion-use-config-file == 'true' ) }}

    - id: main
      shell: pwsh
      run: |
        if ( $${{ ( inputs.use-gitversion == 'true' ) }} )
        {
          $Version = "${{ steps.gitversion.outputs.semVer }}";
        }
        elseif ( $${{ ( inputs.use-tag-as-version == 'true' ) }} )
        {
          $Version = "${{ github.ref_name }}";
        }
        else
        {
          $Version = "${{ inputs.version }}";
        };
        . "${{ github.action_path }}/Invoke-GitHubAction.ps1" `
          -Version $Version `
          -Path "${{ inputs.change-log-path }}" `
          -Destination "${{ inputs.release-notes-path }}" `
          -Verbose:( "${{ inputs.verbose }}" -eq "true" ) `
        ;
